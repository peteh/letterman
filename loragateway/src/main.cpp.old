/*********
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/ttgo-lora32-sx1276-arduino-ide/
*********/
#include <ArduinoJson.h>

// Libraries for LoRa
#include <SPI.h>
#include <LoRa.h>

// Libraries for OLED Display
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// define the pins used by the LoRa transceiver module
#define SCK 5
#define MISO 19
#define MOSI 27
#define RST 14
#define DIO0 26

// 433E6 for Asia
// 866E6 for Europe
// 915E6 for North America
#define BAND 866E6

// OLED pins
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST);

void setup()
{
  // initialize OLED
  Wire.begin(OLED_SDA, OLED_SCL);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false))
  { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed, loop forever
  }

  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print("LORA RECEIVER ");
  display.display();

  // initialize Serial Monitor
  Serial.begin(115200);

  // SPI LoRa pins
  SPI.begin(LORA_SCK, LORA_MISO, LORA_MOSI, LORA_CS);
  // setup LoRa transceiver module
  LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);

  if (!LoRa.begin(BAND))
  {
    Serial.println("Starting LoRa failed!");
    while (1)
      ;
  }
  // Serial.println("LoRa Initializing OK!");
  display.setCursor(0, 10);
  display.println("LoRa Initializing OK!");
  display.display();
}
int lastCounter = 0;
void loop()
{
  // try to parse packet
  int packetSize = LoRa.parsePacket();

  if (packetSize > sizeof(uint16_t) + sizeof(uint16_t))
  {
    // received a packet
    Serial.println("Received packet: ");

    // read packet header bytes:
    uint32_t sender;
    LoRa.readBytes((uint8_t *)(&sender), sizeof(sender)); // recipient address

    uint16_t expectedLength;
    LoRa.readBytes((uint8_t *)(&expectedLength), sizeof(expectedLength)); // incoming msg length

    uint8_t loraBuffer[1000];
    loraBuffer[0] = 0;
    uint16_t readLength = 0;
    readLength = LoRa.readBytes(loraBuffer, expectedLength);

    loraBuffer[readLength] = 0;

    if (expectedLength != readLength)
    { // check length for error
      Serial.printf("error: message length: %d does not match expected length: %d",
                    readLength,
                    expectedLength);
      Serial.println();
      return; // skip rest of function
    }


    StaticJsonDocument<1000> doc;
    // Deserialize the JSON document
    DeserializationError error = deserializeJson(doc, (const uint8_t*) loraBuffer);

    // Test if parsing succeeds.
    if (error)
    {
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
      return;
    }
    

    Serial.println();

    Serial.printf("Received from: 0x%4x", sender);
    Serial.println();
    Serial.printf("Message from payload: %d", expectedLength);
    Serial.println();
    Serial.printf("Message length read: %d", readLength);
    Serial.println();
    Serial.println((char*) loraBuffer);
    Serial.println();
    Serial.printf("RSSI: %d", LoRa.packetRssi());
    Serial.println();
    Serial.printf("Snr: %d", LoRa.packetSnr());
    Serial.println();
    Serial.println();

    // Display information
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("LORA RECEIVER");
    display.setCursor(0, 10);
    display.print("RSSI:");
    display.setCursor(40, 10);
    display.print(LoRa.packetRssi());
    display.setCursor(0, 20);
    display.print("Sender: ");
    display.setCursor(40, 20);
    display.printf("%4x", sender);
    display.setCursor(0, 30);
    display.printf("%s", loraBuffer);
    display.setCursor(0, 40);

    display.display();
  }
}
